version: "3.9"
services:
  #needed to allow access to host's docker daemon while integration testing in multistage build
  testcontainers_bridge_to_docker_daemon_on_host:
    ports:
      - "127.0.0.1:2375:2375"
    volumes:
      - //var/run/docker.sock://var/run/docker.sock
    image: alpine/socat
    command: tcp-listen:2375,reuseaddr,fork unix-connect:/var/run/docker.sock

  library_instance:
    container_name: lib_container
    hostname: service
    build:
      context: ../../../
      dockerfile: src/main/docker/lib-service/dockerfile-multistage
    env_file:
      - compose.env
    environment:
      envs.port: ${SERVER_PORT}
      envs.debug.query: ${QUERY_LOGGING}
      envs.debug.param: ${QUERY_PARAM_LOGGING}
      envs.database.name: ${DB_NAME}
      envs.database.username: ${DB_USERNAME}
      envs.database.password: ${DB_PASSWORD}
      SPRINGPROFILES: "actuator,default"
      ###todo somehow cant move this to env variable, need to investigate
      spring.r2dbc.url: r2dbc:pool:postgres://postgres_db/movies-db
      spring.r2dbc.name: dev
      spring.r2dbc.password: dev123
    ports:
      - "8083:8083"
    restart: always
    depends_on:
      - postgres_db
      - testcontainers_bridge_to_docker_daemon_on_host

  postgres_db:
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    env_file:
      - compose.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./docker-db/init:/docker-entrypoint-initdb.d
      - ./docker-db/data/db-data:/var/lib/postgresql/data
#    ports:
#      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dev -d movies-db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  pgadmin:
    hostname: admin_console
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    depends_on:
      - postgres_db
    environment:
      PGADMIN_DEFAULT_EMAIL: "dev@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "dev123"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./docker-db/data/pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  grafana:
    build: './monitoring/grafana'
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
